import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams } from 'ionic-angular';
import { TabsPage } from '../tabs/tabs';
import { AuthServiceProvider } from '../../providers/auth-service/auth-service';
import { ValidatorServiceProvider } from '../../providers/validator-service/validator-service';

import { FormControl, FormGroup, Validator, FormBuilder, Validators, ValidationErrors } from '@angular/forms';





/**
 * Generated class for the LoginPage page.
 *
 * See https://ionicframework.com/docs/components/#navigation for more info on
 * Ionic pages and navigation.
 */

@IonicPage()
@Component({
  selector: 'page-login',
  templateUrl: 'login.html',
})
export class LoginPage {

  form: FormGroup;

  formErrors = {
    email: '',
    password: ''
  }

  validationMessages = {
    email : {
      required: 'Email is required.',
      email: '请输入正确的邮箱格式'
    },
    password: {
      required: '请输入密码',
      minLength: '密码至少六位'
    }
  }

  constructor(
    public navCtrl: NavController,
    public navParams: NavParams,
    public authService: AuthServiceProvider,
    public validatorService: ValidatorServiceProvider,
    private fb: FormBuilder) {
      this.buildForm();
  }


  buildForm() {
    this.form = this.fb.group({
      email: ['',[Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6) ]]
    })

    this.form.valueChanges.subscribe(
      (data) => {
        console.log(data);
        // this.validatorForm();
      }
    )
  }

  validatorForm (){
    for (let field in this.formErrors) {
      // clear that input field errors
      this.formErrors[field] = '';

      // grap an input field by name
      let input = this.form.get(field);

      if (input.invalid && input.dirty || input.touched) {
        // figure out the type of error
        //1.  for...in语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。注意其所遍历的是对象的属性
        /**
         * var a = {"a": "b", "c": "d"}
         * for (let error in a) {
         *  console.log(error)
         * }
         * // a
         * // c
         *
         * **/

         // 2.  get errors: ValidationErrors | null : Returns any errors generated by failing validation. If there are no errors, it will return null.
         /**
          * type ValidationErrors = {
          *   [key: string] : any
          * }
          *
          */
         for (let error in input.errors as ValidationErrors) {
           // assign that type of error message to a variable

         }
      }
    }
  }

  // get emailControl():FormControl {
  //   return this.form.get('email') as FormControl;
  // }

  processForm() {
    console.log('processing', this.form);
  }

  login () {
    this.authService.userLogin()
        .subscribe(
          (data) => {
            console.log(data);
          },
          (error) => {
              console.log(error);
          }
        )
    // this.navCtrl.push(TabsPage);
  }

  ionViewDidLoad() {
    // console.log('ionViewDidLoad LoginPage');

  }
}
